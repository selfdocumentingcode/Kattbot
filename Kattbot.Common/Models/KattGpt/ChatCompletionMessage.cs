using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Kattbot.Common.Models.KattGpt;

public record ChatCompletionMessage
{
    public ChatCompletionMessage(string role, string? content)
    {
        Role = role;
        Content = content;
    }

    public ChatCompletionMessage(string role, string content, string toolCallId)
    {
        Role = role;
        ToolCallId = toolCallId;
        Content = content;
    }

    [JsonConstructor]
    public ChatCompletionMessage(
        string role,
        string? content,
        string? name,
        string? toolCallId,
        List<ChatCompletionToolCall>? toolCalls)
        : this(role, content)
    {
        ToolCalls = toolCalls;
        Name = name;
        ToolCallId = toolCallId;
    }

    /// <summary>
    ///     Gets the role of the messages author. One of system, user, assistant, or function.
    ///     https://platform.openai.com/docs/api-reference/chat/create#messages-role.
    /// </summary>
    [JsonPropertyName("role")]
    public string Role { get; } = null!;

    /// <summary>
    ///     The contents of the assistant message.
    ///     Required unless tool_calls or function_call is specified.
    ///     Dev note: This should be private but the api is being weird and doesn't allow nulls like it says it does
    /// </summary>
    [JsonPropertyName("content")]
    public string? Content { get; set; }

    /// <summary>
    ///     An optional name for the participant.
    ///     Provides the model information to differentiate between participants of the same role.
    ///     TODO: Use this instead of tokens in messages.
    /// </summary>
    [JsonPropertyName("name")]
    public string? Name { get; }

    /// <summary>
    ///     Tool call that this message is responding to.
    /// </summary>
    [JsonPropertyName("tool_call_id")]
    public string? ToolCallId { get; set; }

    /// <summary>
    ///     The tool calls generated by the model, such as function calls.
    /// </summary>
    [JsonPropertyName("tool_calls")]
    public List<ChatCompletionToolCall>? ToolCalls { get; }

    public static ChatCompletionMessage AsSystem(string content)
    {
        return new ChatCompletionMessage("system", content);
    }

    public static ChatCompletionMessage AsUser(string content)
    {
        return new ChatCompletionMessage("user", content);
    }

    public static ChatCompletionMessage AsAssistant(string content)
    {
        return new ChatCompletionMessage("assistant", content);
    }

    /// <summary>
    ///     Builds a message as a function call which contains the function result to be added to the context.
    /// </summary>
    /// <param name="content">The result of the function.</param>
    /// <param name="toolCallId">The name of the function.</param>
    /// <returns>A <see cref="ChatCompletionMessage" />.</returns>
    public static ChatCompletionMessage AsToolCallResult(string content, string toolCallId)
    {
        return new ChatCompletionMessage("tool", content, toolCallId);
    }
}
