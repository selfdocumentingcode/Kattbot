using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using DSharpPlus.CommandsNext;
using DSharpPlus.Entities;
using Kattbot.Services.Images;
using MediatR;
using Newtonsoft.Json;

namespace Kattbot.CommandHandlers.Images;

public class DallePromptCommand : CommandRequest
{
    public string Prompt { get; set; }

    public DallePromptCommand(CommandContext ctx, string prompt)
        : base(ctx)
    {
        Prompt = prompt;
    }
}

public class DallePromptCommandHandler : AsyncRequestHandler<DallePromptCommand>
{
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly ImageService _imageService;

    public DallePromptCommandHandler(IHttpClientFactory httpClientFactory, ImageService imageService)
    {
        _httpClientFactory = httpClientFactory;
        _imageService = imageService;
    }

    protected override async Task Handle(DallePromptCommand request, CancellationToken cancellationToken)
    {
        DiscordMessage message = await request.Ctx.RespondAsync("Working on it");

        try
        {
            HttpClient client = _httpClientFactory.CreateClient();

            string url = "https://backend.craiyon.com/generate";

            var body = new DalleRequest { Prompt = request.Prompt };

            string json = JsonConvert.SerializeObject(body);
            var data = new StringContent(json, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.PostAsync(url, data, cancellationToken);

            response.EnsureSuccessStatusCode();

            string jsonString = await response.Content.ReadAsStringAsync(cancellationToken);

            DalleResponse? searchResponse = JsonConvert.DeserializeObject<DalleResponse>(jsonString);

            if (searchResponse?.Images == null)
            {
                throw new Exception("Couldn't deserialize response");
            }

            ImageStreamResult combinedImage = await _imageService.CombineImages(searchResponse.Images.ToArray());

            string safeFileName = new(request.Prompt.Select(c => char.IsLetterOrDigit(c) ? c : '_').ToArray());
            string fileName = $"{safeFileName}.{combinedImage.FileExtension}";

            DiscordEmbedBuilder eb = new DiscordEmbedBuilder()
                .WithTitle(request.Prompt)
                .WithImageUrl($"attachment://{fileName}")
                .WithFooter("Generated by craiyon.com")
                .WithUrl("https://www.craiyon.com/");

            DiscordMessageBuilder mb = new DiscordMessageBuilder()
            .AddFile(fileName, combinedImage.MemoryStream)
            .WithEmbed(eb)
            .WithContent($"There you go {request.Ctx.Member?.Mention ?? "Unknown user"}");

            await message.DeleteAsync();

            await request.Ctx.RespondAsync(mb);
        }
        catch (Exception)
        {
            await message.DeleteAsync();
            throw;
        }
    }
}

public class DalleResponse
{
    [JsonProperty("images")]
    public List<string>? Images;

    [JsonProperty("version")]
    public string? Version;
}

public class DalleRequest
{
    [JsonProperty("prompt")]
    public string Prompt { get; set; } = string.Empty;
}
